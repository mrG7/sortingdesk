2015-01-22  Miguel Guedes  <miguel@miguelguedes.org>

	* Sorting Desk:

	Component now stops all ongoing requests whenever a folder is
	closed.

	Image data of dropped images now processed and its base64 encoding
	retrieved.

	* Sorting Common:

	Added a base class for views, as used by some components, notably
	Label Browser and Folder Explorer, which does not do anything for
	now apart from ensuring views inherit a common interface.

	Created a small debugging support class built on top of the
	browser's standard `console´ object. It has only one purpose and
	that is to allow for filtering of messages.

	Crafted namespace for HTML-related tasks. At the moment only a
	function exists that retrieves an image's data in base64 encoding.

	* Label Browser:

	Remaining duplicate code refactored such that support classes in Sorting
	Common are used instead.

	* Chrome extension:

	Further polished user interface.

	* All:

	The Sorting Desk/Queue modules now fully support optional
	notification messages, shown in the following scenarios:
	  + no folder open
	  + folder open, but no bins created yet
	  + items queue empty

	ALL components can now coexist with multiple instances, if needs
	be. This was done by ensuring that each component accepts a root
	container, which relevant nodes are assumed to exist in its DOM
	sub-tree.

	Code refactoring: NUMEROUS improvements to code, user interface
	and experience, and SEVERAL issues resolved.


2015-01-16  Miguel Guedes  <miguel@miguelguedes.org>

	* Chrome Extension:

	Added temporary option to extension to ignore HTTPS pages.

	Created a resource loader class, which at present, supports
	injection of custom fonts into the active tab's DOM, but can be
	extended to other resource types.

	* Sorting Common:

	Created the module Sorting Common. This module's main aim is to
	support Sorting Desk's growing number of modules and
	components. It features a number of utility classes and functions,
	and base classes intended for specialisation.

	Crafted mechanism for advertising interesting events that clients
	can subscribe to for the purpose of receiving notifications as and
	when these occur. Re-engineered all components so as to use this
	mechanism.

	Created a class that provides support for callbacks, and includes
	such features as querying and optional invocation of callbacks.

	Yet another class was created whose purpose is to manage
	constructors and/or factory methods, and enable clients to invoke
	these to instantiate classes on demand.

	Moved code related to support of drag-and-drop into this module.

	Added several type introspection and other support functions.

	* Sorting Queue:

	The component now makes use of loose declarative binding of
	elements and thus does not necessitate that references to nodes be
	provided any more.

	* Sorting Desk:

	This component, as with Sorting Queue above, now relies on
	declarative binding of elements and no longer requires references
	to nodes to be supplied via its options map.

	It now employs the `Constructor´ class through which all
	instantiation of classes is done.

	Its options map now requires Sorting Queue's options to be kept
	separate and these are routed through with a minor alteration;
	this being a new option since added that instructs Sorting Queue
	to not load the items list at startup.

	* All:

	All components now use the `Events´ class for advertising
	interesting events and notifying clients when these occur.

	Removed unused files and reorganised stray source files.

	Code refactoring: NUMEROUS improvements to code, user interface
	and experience, and SEVERAL issues resolved.

2015-01-09  Miguel Guedes  <miguel@miguelguedes.org>

	* Sorting Desk:

	Created the Folder Explorer component, which presently supports
	the following feature set:

	+ create folder
	+ click selects folder
	+ remove selected folder
	+ double click selects folder and closes window

	* Chrome Extension:

	Integrated Folder Explorer into extension. Label Browser now able
	to notify clients of interesting events such as when loading of
	labels has terminated.

	Revamped logic responsible to setting and getting state to/from
	local storage.

	* All:

	Greatly improved styling and code all-round.

2015-01-05  Miguel Guedes  <miguel@miguelguedes.org>

	* Sorting Desk:

	Created a prototype component, the Label Browser, that allows for
	the contents of feature collections to be visualised.

	What works:

	+ viewing the subtopics of feature collections that have positive
	coreference.

	What doesn't:

	+ there is only one view mode, which consists of showing all
	subtopics from all feature collections retrieved. Another view
	mode could allow for subtopics to be shown in groups, with each
	feature collection becoming a group.

	+ toolbar; it's there merely as a suggestion of the direction the
	UI could go.

	+ subtopics whose content is an image aren't shown as images yet.

	+ the Sorting Desk main component remains active alongside the
	browser, which means that it is possible to for the user to change
	the state of entities; these changes aren't reflected in the
	browser (nor is it understood at present if they should).

2014-12-24  Diffeo  <support@diffeo.com>

	* all:

	Re-classified `SortingDesk´ component. The `SortingDesk´ component
	is now an *example* and has, therefore, been moved to the
	`examples´ directory. The component itself was renamed to
	`sorting-bins-example´, as per instructions received. All existing
	examples using the old `SortingDesk´ component have been
	updated. API source files and mock data pertaining to
	`SortingDesk´ have also been moved to the `examples´ directory.

	Renamed `SortingDossier´ component to `SortingDesk´ and appended
	"live" to `SortingDesk's´ api source file name. All existing
	references have been updated.

2014-12-23  Diffeo  <support@diffeo.com>

	* src/SortingDossier.js:

	Fully decoupled `SortingDossier´ and removed all hard-coded
	references to Google Chrome browser's unique global objects. It
	should now be possible to use the component in virtually any
	context.

	* src/browser/extensions/chrome/*:

	Added callbacks and message handling capabilities to account for
	the increased genericity of the `SortingDossier´ component.

	Improved styling of activator button.

2014-12-22  Diffeo  <support@diffeo.com>

	* src/SortingDossier.js:

	Imported `SortingDossier´ component from Datawake
	repository. Still has a few hard-coded statements to Google
	Chrome's browser `chrome´ global object because of the fact that
	it was being used in an extension for the aforementioned browser.

	* src/browser/extensions/chrome/*:

	Created standalone Google Chrome browser extension employing the
	`SortingDossier´ component.

2014-12-16  Diffeo  <support@diffeo.com>

	* src/SortingQueue/SortingQueue.js:

	A small change was made to the `Droppable´ class to ensure that
	all events are properly dettached when the instance is reset.

2014-12-15  Diffeo  <support@diffeo.com>

	* src/SortingQueue/SortingQueue.js:
	* src/SortingDesk/SortingDesk.js:

	Code now uses `hasOwnProperty´ instead of `in´.

	Reworked way modules are declared in global namespace.

2014-12-10  Diffeo  <support@diffeo.com>

	* src/SortingQueue/SortingQueue.js:
	* src/SortingDesk/SortingDesk.js:

	Renamed `Instance´ class to `Sorter´.

	Code now allows a reference to an event to be passed to the
	`itemSelected´ callback when a user action triggered an item to be
	selected. An event is passed, if applicable and available,
	otherwise null.

	`DragDropManager´ now supports the concept of `null´ scopes. Null
	scopes were implemented so that clients may find it easier to
	extend HTML5 drag and drop support to entities of any kind, be
	they browser-based or not.

	It is now possible to instruct Sorting Queue not to allow items to
	be draggable by setting the option `itemsDraggable´ to `false´.

	Removed hardcoded references to CSS classes.

	Cleaned up code in places.

	* dossier.js/Dossier.js:

	Added emacs hints.

2014-12-06  Diffeo  <support@diffeo.com>

	* tests:

	Added several new tests, namely:

	+ Pressing the up arrow key selects the previous item.
	+ Pressing the down arrow key selects the next item.
	+ An item is selected by default upon instantiation.
	+ The item selected by default upon instantiation is the top-most
	one.

	In addition, some existing tests have been made more robust and
	additional checks and expectations have been added, in particular
	to ensure that expected UI state match the actual SortingQueue
	state.

	* src/SortingQueue/SortingQueue.js:

	Fixed exceptions thrown when processing the `itemDismissed'
	callback.

	* all:

	A few minor improvements to code.

2014-12-05  Diffeo  <support@diffeo.com>

	* tests:

        Fixed broken tests and improved a number of structural
	deficiencies, namely:

	+ Recent changes made to SortingQueue, in particular its AMD
	module loading logic, meant that the manner in which tests were
	loaded, initialised and executed was fundamentally flawed. This
	needed to be re-engineered.

	+ Given that SortingQueue is no longer responsible for bin (or
	even aware of the concept), a few tests had to be removed. In
	addition, and in anticipation that tests will be written for
	SortingDesk at some point in time, infrastructure was laid down to
	support tests for multiple components.

	+ As a result of the above changes, describing a test
	specification is now much cleaner and the underlying
	infrastructure much more reliable and solid.

2014-11-26  Diffeo  <support@diffeo.com>

	* SortingDesk:

	Implemented all required major features, namely:

	+ Set active bin, and internally set query content id
	+ Drag item into dismissal button and trigger `addLabel' callback
	+ Drag item into bin and trigger `itemDroppedInBin' callback
	+ Drag item into DOM body and create a bin
	+ Drag bin into another bin and merge them

	Creating a bin now does not trigger a callback (formerly invoked
	`addBin') and similarly, nor does removing a bin.

	* css:

	Adjusted CSS styling.

	* all:

	MANY improvements to the code.

2014-11-25  Diffeo  <support@diffeo.com>

	* src/SortingQueue/SortingQueue.js:

	Implemented explicit initialisation of SortingQueue to support
	clients with more complicated instantiation procedures, as is the
	case with SortingDesk.

	Added logic to forcefully redraw the items container, a useful
	feature to clients whose items vary according to different
	contexts.

	* src/SortingDesk/SortingDesk.js:

	A user can now manually make a bin the active one by clicking on
	it. By default, the first bin added internally, usually on
	instance initialisation, is made active. The items container is
	redrawn when a different bin is activated.

	Upgraded `BinAddButton' into a `Controller'-derived class and
	split its functionality into an abstract class, for easy
	specialisation by clients (`ControllerBinSpawner'), and a default
	implementation (`ControllerBinSpawnerDefault').

	* examples/sorting_desk-mock-default.html:

	Created example illustrating new SortingDesk's new
	feature-set. The example's javascript logic had to be moved into a
	separate source file (see
	`examples/js/sorting_desk-mock-default.js') as it was causing
	formatting issues and thus impeding development.

	* CSS:

	Created styling for the sorting_desk-mock-default example.

	* all:

	Given that the `TextItem' prefixed classes have been renamed to
	`Item', it then follows that the callbacks (events?) prefixed with
	the string `text' should also be renamed to `item'; this has now
	been done.

	Removed no longer used files.

	Many minor improvements.

2014-11-24  Diffeo  <support@diffeo.com>

	* mock APIs:

	Created API for the SortingDesk component that makes use of mock
	data. It supports the following features:

	+ retrieval of random ranker
	+ creation of a bin
	+ removal of a bin
	+ setting a bin active
	+ retrieval of items based on the currently active ranker

	SortingDesk's mock API, and SortingDesk itself, need further
	work. In particular the API's =addBin= reliance on being supplied
	with a ranker is particularly annoying.

	Created mock data for use with SortingDesk's API employing
	different fake "rankers", each of which with its own list of
	items. This needs to be revisited as it doesn't model real world
	usage, but for now should serve the purpose of illustrating how
	the component works.

	Improved several (minor) aspects in SortingQueue's mock API.

	* CSS:

	Merged CSS used by examples and separated styles so that examples
	targeting the two components can have their own specific styles.

	* src/SortingDesk/SortingDesk.js:

	Reworked component instantiation to enable a random ranker to be
	retrieved, a bin created and made active, before the component is
	initialised.

	* all:

	Removed dead or code no longer relevant.

	Several improvements.

2014-11-22  Diffeo  <support@diffeo.com>

	* all:

	Fixed lingering AMD module loading issues. There are no issues now
	concerning automatic loading of dependencies.

	* src/SortingQueue/SortingQueue.js:

	Created a keyboard input base class that handles low level
	initialisation and reset of keyboard events.

	Implemented a specialised class with the purpose of handling
	keyboard input events specific to the `SortingQueue' component.

	Reworked `ControllerButtonDismiss' class so as to enable clients
	to register drop scopes and function handlers to process said drop
	events.

	* src/SortingDesk/SortingDesk.js:

	Created a specialised class that handles keyboard input events
	specific to the `SortingDesk' component.

2014-11-21  Diffeo  <support@diffeo.com>

	* all:

	Renamed the old `SortingDesk' component to `SortingQueue'. This
	involved making an extensive number of changes to examples,
	embedded javascript in HTML files, descriptions in CSS and others.

	References to the global object (usually `window', if run from
	within a browser) and active jQuery instance are now passed in to
	the module initialiser function of components compatible with AMD
	specifications¹, for the sake of greater encapsulation. However,
	because we also provide compatibility with conventional javascript
	loading methods, this change means loading of said modules has
	become slightly more complicated given that they now require their
	respective dependencies to be loaded previously.

	Renamed `TextItem' class to `Item'.

	Few simple improvements made to code.

	¹ Currently only `SortingDesk' and `SortingQueue' employ this.

	* examples:

	Added example making use of (most) all of (new) `SortingDesk'
	component's features.

	Fixed broken examples after `SortingQueue' component's rename and
	creation of new `SortingDesk'.

	Employed different naming scheme to reflect the component being
	used (either `SortingQueue' or `SortingDesk').

	Removed unused (and severely broken) "rating" examples.

	* src/SortingDesk/SortingDesk.js:

	Created new component and ensured it is compatible with both the
	AMD specifications and conventional javascript loading methods,
	despite there being downsides to this.

	Moved all code pertaining to the "bins" concept into this new
	component, namely: `ControllerBins', `Bins', `BinDefault' and
	`BinAddButton'.

	* src/SortingQueue/SortingQueue.js:

	Moved code out that belongs in the new `SortingDesk'.

	Component now exports additional classes so as to enable clients
	(and applications alike) to craft classes sharing the same base
	classes that `SortingQueue' uses.

2014-10-15  Diffeo  <support@diffeo.com>

	* src/main/SortingDesk.js:

	Consolidated the interfaces of `ControllerBin' and
	`ControllerItem'.

	Sub-bins can now be instantiated via a factory method.

	Main class constructor now requires bins' descriptors to be given
	in a `bins' option and no callback is invoked to retrieve bin
	data. This resulted in a `Bin' class constructor not requiring its
	id given separately.

	* examples:

	Reverted to a previous commit when examples were standalone.

	Created a prettier example of Sorting Desk utilising improved CSS
	styling.

	Created an example that uses Sorting Desk's now default bare-bones
	CSS styling.

	* css:

	Stripped Sorting Desk's CSS down to a minimum that allows it to
	function with only very basic CSS styling.

	* Api:

	Consolidated `Api' namespaces' interfaces.

	Fixed stub `removeBin'.

	* all:

	Several improvements to code.


2014-10-10  Diffeo  <support@diffeo.com>

	* src/main/SortingDesk.js:

	Added support for sub-bins. Sub-bins can now be created, queried,
	dragged and dropped, and removed. In addition, there is no limit
	to the number of children any bin, allowing for an arbitrary depth
	of bins that are parents to other bins.

	Implemented a number of deep-search methods for querying multiple
	aspects about top-level bins and their children.

	Sorting Desk now allows the client to specify factory methods
	for construction of classes but also classes via the
	`options.constructors' setting.

	The usual several minor improvements to code.

	* css:

	Moved styling pertaining to sub-bins away from Sorting Desk's
	internal style sheet.

	* examples:

	Logic now in place that ensures Sorting Desk instantiates itself
	correctly.

	Added examples of sub-bins.

	* src/api/api-sorting_desk-mock.js:

	Added support for initialisation and querying of sub bin data.

2014-10-09  Diffeo  <support@diffeo.com>

	* src/main/SortingDesk.js:

	Implemented "constructors", employing the factory method pattern,
	for instantiation of public classes.

	Finished generic mechanism responsible for resetting the Sorting
	Desk instance reliably.

	Merged classes `BinBase', `Bin', and `SubBin'. There is only one
	class now, `Bin'.

	Renamed old `Generic'-suffixed classes to `Default' suffix.

	Several minor improvements to code.

	* examples:

	Created a mechanism for creating examples as modules. Examples can
	now be crafted easily as a module. It is also easy to switch
	between examples by selecting desired example from a select box.

	Deleted extraneous examples.

2014-10-02  Diffeo  <support@diffeo.com>

	* src/main/SortingDesk.js:

	Effort made towards decoupling the different components that are
	part of Sorting Desk. This has led to the creation of a number of
	classes, namely:

	+ InstanceResetter: resets Sorting Desk's state (still to be
	finalised) in a rather intelligent fashion.

	+ ControllerCallbacks: handling of notifications to or issuing to
	callbacks. I'm actually thinking of creating a class employing the
	Publish-Subscribe pattern for notification of interesting events
	such as when a bin is deleted, a text item assigned to a bin, etc,
	and keeping this class strictly for the purpose of contacting Api
	methods dealing with server requests. Right now this class does
	both and that's wrong from a OOD perspective.

	+ ControllerRequests: responsible for keeping track of ongoing
	requests. A request is classed as such if it is custom specified
	by a Sorting Desk class instance, or if a callback invocation
	results in a promise being returned.

	+ ControllerButtonDismiss: activation/deactivation of the text
	item/bin dismissal button and drag'n'drop support.

	+ ControllerKeyboard: global keyboard event listener and processor
	of keyboard initiated events.

	+ ControllerBins: manager of bins.

	+ BinBase: base class of every bin, parent or child.

	+ Bin: base class of parent bins.

	+ BinGeneric: generic, default, implementation of the Bin class.

	+ SubBin: base class of children bins.

	+ SubBinGeneric: generic, default, implementation of the SubBin class.

	+ ControllerItems: manager of text items.

	+ TextItem: base class of text items.

	+ TextItemGeneric: generic, default, implementation of the TextItem class.

	+ BinAddButton: generic, default, implementation of the bin add
	button feature. Can be specialised and methods overriden for
	customised behaviour.

	In addition, a general effort was made to normalise and bring
	consistency to the interface, and getter methods were
	introduced. "Abstract" base classes `Owned', `Controller' and
	`Drawable' were created with a view to enforce interfaces to
	specialised classes.

	Lastly, made usual fixes and improvements to code.

	* css:

	Additional improvements to styling.

2014-10-01  Diffeo  <support@diffeo.com>

	* all:

	Usual minor improvements and fixes to code.

	* css:

	Pre-pend `sd' to CSS classes required or expected by Sorting Desk.

	* src/main/SortingDesk.js:

	Sorting Desk now employs a unified bin model, whereby there is no
	distinction between bins. Although there is no difference in bin
	types, a bin may still be parent to one or more bins -- not
	implemented yet, although infrastructure already has been laid
	down for this purpose.

	Simplified use of CSS.

	Integrated text rendering and snippeting into component. Text
	rendering is now offered by default if a custom callback function
	isn't specified.

	Server requests and general load events are now triggered via a
	callback. Similarly, a callback is invoked after the request has
	terminated.

	Created derivable `Bin' and `TextItem' classes. These need further
	work before they can be specialised outside of Sorting Desk.

	Reverted to a design close to Object Oriented. This change
	retains the Module pattern and full UMD compliance but does away
	with the Revealing Module pattern in order to enable
	specialisation of generic classes by clients.

	* examples:

	Created an example illustrating simple instantiation of Sorting Desk.

	Simplified instantiation of the component in all examples.

2014-09-30  Diffeo  <support@diffeo.com>

	* all:

	Begin moving styling specific to Sorting Desk into own CSS source
	file.

	* src/main/SortingDesk.js:

	Allow component to be instantiated multiple times.

	Begin simplifying component instantiation.

	Ensure code falls within the 80 columns limit.

	Minor improvements and fixes to code.

	* test:

	Adjust tests to reflect new instantiation requirements.

	Fix failing tests.

2014-09-18  Diffeo  <support@diffeo.com>

	* test:

	Wrote additional tests. There are a total of 35 tests.

	* src/main/SortingDesk.js:

	Duration of special effects can now be customised.

	Text items' and bins' ids are now escaped as they may potentially
	contain characters that may cause errors.

	* all:

	Various minor improvements and fixes.

2014-09-16  Diffeo  <support@diffeo.com>

	* jasmine:

	Move jasmine into `lib' directory.

	* tests:

	Fix jasmine instantiating its UI twice. Also fixed an issue
	causing `setup' not to be available to test specs due to `init.js'
	being loaded after one or more specs.

	Wrote additional tests. Of note is support for testing of HTML5
	drag and drop events.

	* all:

	Several minor improvements and fixes, as usual.

2014-09-15  Diffeo  <support@diffeo.com>

	* all:

	Add support for RequireJs. `SortingDesk.js',
	`api-sorting_desk-mock.js' (and its fake data), and the unit tests
	can now be entirely loaded via RequireJs. Compatibility with
	traditional declarative loading method retained.

	Moved external libraries into a single location, with symbolic
	links now used to point to them.

	Several minor improvements and fixes.

	* tests:

	Wrote additional tests.

	* src/main/SortingDesk.js:

	Added check to ensure `reset' isn't called multiple times.

2014-09-12  Diffeo  <support@diffeo.com>

	* all:

	Reworked code so it employs the Module design pattern. Added a few
	public methods for clients to use.

	Added jsdoc comments where applicable.

	Created a basic makefile for generation of documentation from the
	code. Minification of javascript is not yet performed as a
	minification tool needs to be first selected.

	Reworked code so as to allow tests to be executed empirically and
	in a fail proof fashion. This required several changes to be made,
	some of which to plug bizarre executions flows that became
	apparent due to the async nature of the tests employed.

	Create base infrastructure for reliable deployment of unit tests.

	Wrote additional tests.

	Various minor improvements.

2014-09-09  Diffeo  <support@diffeo.com>

	* test:

	Added infrastructure allowing for the deployment of unit
	tests. Handful of initial unit tests also added.

	* all:

	Reorganised directory structure.

	Component is now able to operate without the bin delete button.

	Renamed the `test' directory to `examples' to make way for the
	actual unit tests.

	Other minor improvements.

2014-09-06  Diffeo  <support@diffeo.com>

	* src/main/SortingDesk.js:

	Simplified and standardised HTML5 drag and drop, which now
	works in all major browsers.

	There are now two APIs, one using live data from Diffeo's servers
	and another making use of mock data. The mock API can be easily
	configurable to use a custom data set.

	Several minor improvements.

2014-09-05  Diffeo  <support@diffeo.com>

	* src/main/SortingDesk.js:

	Removed reliance on hard-coded CSS classes.

	When removing a bin, it wasn't actually deleted from the internal
	data container. That's now been fixed.

	Text items can now be sorted into the button that was previously
	used to delete bins. Text items can, therefore, now be removed
	without being sorted into a specific bin.

	Component now fully uses HTML5 drag and drop. Reliance on jQuery's
	UI plugin has been dropped and the plugin removed from the
	repository.

	Changes were made to ensure that Sorting Desk can still function
	without a `bins' (HTML) container.

	Removed responsibilities for several UI related aspects. These are
	now the sole responsibility of the caller.

	Several improvements and minor fixes.

2014-08-22  Diffeo  <support@diffeo.com>

	* all:

	Added initial foundation for a user notification mechanism.

	Minor improvements to code.

	* src/main/SortingDesk.js:

	The appropriate bin removal callback is now invoked when a bin is
	removed.

	Added initial support for bin ids to be passed to API bin addition
	callbacks when a user creates a bin based on an existing text
	item.

	* test/js/api-sorting_desk.js (Api):

	Created missing API method `removePrimarySubBin'.

	Fixed `removeSecondaryBin' actually not deleting bin from fake
	data repository.

2014-08-21  Diffeo  <support@diffeo.com>

	* all:

	Several improvements to UI interaction made: text item node now
	forcibly selected when more/less link clicked; text item node is
	aligned to top if its height is larger than container; correct
	spacing ensured at bottom when repositioning; other minor
	enhancements.

	A few bugs, most of which introduced recently, were also fixed,
	namely: visually broken d'n'd of large text items; occasional
	vertical flicker when dragging items; enforce a single API request
	per kind; other minor bugs.

	Added UI notification when one or more AJAX requests are taking
	place.

	Implemented creation of secondary or sub bins via dragging and
	dropping of text items onto a 'bin add' button.

	Finalised text rendering algorithm. Component is now fully modular
	and much smarter. In particular, it is now able to skip over HTML
	tags and produces snippets with roughly equal number of chars to
	the left and right of the highlighted text.

	Implement actual deletion of bin elements from UI. Bin containers
	are now reorganised whenever a bin is deleted.

	Created subdirectory `doc' for project-related generic document
	files.

	Reorganised source files into individual subdirectories.

	Various improvements to code.


2014-08-20  Diffeo  <support@diffeo.com>

	* all:

	Component is now able to retrieve information about primary bin
	from diffeo's RESTful API.

	A title was added to every text item in the form of a link
	(clicking opens a new tab).

	Implemented multi-view, word-bound text rendering
	algorithm. Depending on the current view, a "more" or "less" link
	is displayed which allows for rendering of a condensed or
	unrestricted view of a text item. There might be potentially a bug
	(untested) if the boundaries fall on opened tags (e.g. boundary
	ends after `<b class="foo">'); nothing major though and shouldn't
	affect rendering in any way.

	Component now loads live data from diffeo's RESTful API.

	Added logic for user notification of ongoing AJAX requests.

	A UI control was created that allows for real-time changing of the
	current primary bin's node id. Editing the field and exiting it
	triggers the new primary node id to take effect.

2014-08-14  Diffeo  <support@diffeo.com>

	* src/SortingDesk.js:

	Created UI interaction logic permitting deletion of all
	non-primary bins. Deletion of bins is done by dragging intended
	bin. Once dragging is initiated a target with an `X' inside will
	pop up. Dropping the bin in to the target deletes it. Note,
	however, that no bins are actually deleted yet. Will be waiting
	approval of current implementation before actual bin removal logic
	is added.

	Separated `bin' and `bin containment' responsibilities. Required
	quite a bit of work.

	Implemented logic enabling interactive creation of bins. Bins are
	created by clicking the appropriate 'add' button and waiting for
	input from the user. If the user moves away from the new bin
	without entering a description/title, creation of the bin is
	cancelled. If a description/title has been entered, hitting TAB or
	ENTER, or moving away from the new bin results in the creation of
	a new bin.

	Reworked mechanism by which bins are created.  There were serious
	presentation issues involving bins whose titles/descriptions
	spanned more than one line.

	Bin animates when an item is assigned via a keyboard shortcut.

	Removed reliance on hardcoded CSS classes.

	* test/css/theme-default.css: Several clean up/improvements of CSS
	styling.


Copyright (C) 2014 Diffeo
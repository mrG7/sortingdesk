* Generic
* Components
** *ALL*
*** TODO Mechanism for stopping all ongoing AJAX requests
Behaviour is currently unknown if one switches to a folder while some sort of loading is taking place when the switch occurs (=moreTexts=, getFc=, etc). We need to be able to systematically terminate any and all AJAX requests taking place *before* the switch occurs.

*** TODO Consider using SASS

*** TODO Do *NOT* allow CSS classes to be specified in =options=
This actually makes no sense and borders on the nonsensical. The assumption should be that the (different) components all use a *fixed* set of CSS classes, which are properly prefixed thus creating a namespace of sorts, which the client can then provide custom styling for. The CSS class names themselves should *not* be allowed to change.

Example:

The HTML element representation of an item, as created by =SortingQueue=, will *always* be given the CSS class =sd-text-item= and this class name can *not* be changed or configured, ever.

*** TODO Replace methods with (prefix) string =initialis= for =initializ=

**** TODO Request feedback from Diffeo about other British-isms and use American English variations
This may be of particular concern given the sensitive nature of the project.

*** TODO Document code
First iteration would include modules and classes.

*** TODO Document required options
=SortingQueue=, =SortingDesk= and possibly other components, could do with documentation about required and optional options, callbacks and so on.

** =SortingCommon=

** =SortingQueue=
*** TODO Rename CSS class names alluding to the old concept of text item
Some CSS class names are still in use which employ the old concept of text item. These should be renamed such that the "text" word is removed.

*** TODO =Droppable=: requires reset method
See =ProtarchBinSpawner=. Specifically, there are instances where the events attached by =Droppable= need to be unbound at destruction time; i.e. when a =Droppable= instance is created on the DOM's own body.

*** TODO =ControllerItems=: disable all other dragging-related events

*** TODO Prefix text-items' node ids
- State "TODO"       from "WAIT"       [2014-09-07 Sun 08:16]
- State "WAIT"       from "TODO"       [2014-09-05 Fri 10:41] \\
  Currently waiting to hear from support as to whether ids are guaranteed to always be unique.
    
** =DossierJS=
*** TODO Implement a request manager

** =SortingDesk=
*** =FolderExplorer=
**** TODO Disallow creation of folder with duplicate name
**** WAIT Do not require constructor to =LabelBrowser= component
- State "WAIT"       from "TODO"       [2015-01-15 Thu 15:52] \\
  Need time to assess.
Trigger an event instead and let client deal with it.

**** TODO Selecting folder should also switch Sorting Desk's active folder but not close window
**** TODO Implement folder renaming

*** =LabelBrowser=
**** TODO Must fire event when the content id's FC could not be fetched
This is so the client can update state should loading of state fail. Right now, if the referential FC fails to load, the Label Browser's window shows the strings "Loading" and "Please wait" because the =Ui= instance isn't aware loading actually failed.

**** TODO Show labels ungrouped or grouped by feature collection (=content_id=)
*** TODO Fire event when no bins exist
The extension looks too barren and dumb right after a new folder has been created. A mechanism is needed that allows for an event to be fired to communicate this fact.

*** TODO Encode images to base64
Relevant links to research:

+ [[https://developer.mozilla.org/en-US/docs/Web/API/ImageData][ImageData]]
+ [[http://stackoverflow.com/questions/934012/get-image-data-in-javascript][Get image data in Javascript]]
+ [[http://stackoverflow.com/questions/10754661/javascript-getting-imagedata-without-canvas][Getting image data without canvas]]

It basically relies on using the =canvas= element to get the image data. Then, it's just a matter of encoding the image data to base64 and stuff it into the subtopic value for that image. Afterwards it's only a matter of showing the image as a [[https://developer.mozilla.org/en-US/docs/Web/HTTP/data_URIs][data URI]].

*** WAIT Implement keyboard auto-repeat with configurable frequency
- State "WAIT"       from "TODO"       [2014-10-15 Wed 13:56] \\
  Probable unwanted feature.
  
*** WAIT Do not allow duplicate bins
- State "WAIT"       from "CANCELED"   [2014-11-26 Wed 09:09] \\
  Reissuing TODO item as there is validity in the concept.
- State "CANCELED"   from "WAIT"       [2014-09-04 Thu 13:02] \\
  Most likely can't be done reliably.
- State "WAIT"       from "TODO"       [2014-08-22 Fri 12:44] \\
  Specifications aren't clear as to how bins that are based on existing text items
  are created.
  
** Extension
*** All
*** Chrome
**** TODO =DossierJS=: must reside in =background.js=
Moving =Dossier.JS= into =background.js= would effectively mean the limitations on same-origin policy would no longer apply.

**** TODO Re-calculate sizes (and positions) of UI elements when the browser window is resized
**** TODO Allow container to be moved to either side of the page
Attempt mechanism that doesn't show container over the page but alongside it instead.

** API
*** All
**** TODO Add timeout to AJAX calls

*** Live
**** TODO Place methods in relevant namespaces
For instance all methods pertaining to feature collection should be in a `fc´ or `featureCollection´ namespace of their own.

**** TODO Force clients of the =Api= module to instantiate it
As it stands, the =Api= module can only be used by one client at a time.

**** TODO Remove bypass of =DossierJS.SortingQueueItems.prototype._moreTexts=
The bypass was created do deliver items in the format expected by =SortingQueue= but this should instead be integrated in DossierJS. Better still, IMHO, would be to integrate what is now the =SortingQueueItems= class in =Api=.

** Examples
*** TODO Fix broken examples

*** WAIT Create examples [0%]
- State "WAIT"       from "TODO"       [2014-11-25 Tue 06:39] \\
  Not a priority at the moment.
  
**** TODO No content ids

** Tests
*** TODO instance: ensure reset doesn't run twice

*** TODO instance: require =visibleItems= to be greater than 0

*** TODO interface: ensure 'bin add' button is created prior to using it

*** TODO interface: ensure correct number of sub-bins are created

*** TODO interface: removed test for adding of sub-bin

** Unclassified
*** TODO Revamp errors returned via promises to include error *codes*
It is easier for programs to process errors if they are given as a code. Errors in human natural language are only useful to humans, not programs.

*** TODO Review data structures
This includes =Sorting Desk='s bin data structure and =Sorting Queue='s item
data structure. Changes to any of the components will require updating the
different API and example source files, as well as dossier.js .

For instance, Sorting Queue expects an item to be composed of the following properties:

+ =raw=: reference to raw structure; probably not needed
+ =node_id=: the item's id
+ =name=: (a sort of) label/tag
+ =url=: URL to point =name= above to
+ =text=: actual item content
+ =title=: optional; appended to =name= above

The above could instead be:

+ =id=
+ =label= (or =tag=)
  - =name=
  - =title=
  - =url=
+ =text=

A similar discussion could be had regarding bins' data structure.

*** TODO Employ use of classes to identify hover state and possibly others
This is meant to resolve the problem that parent elements can't be styled depending on mouse state, such as =:hover=, when nested elements are used. The only way to reliably solve this problem is to rely on CSS classes to signal mouse states.

*** WAIT Resolve all annotated TODO items
- State "WAIT"       from "TODO"       [2014-10-15 Wed 13:57] \\
  To be done when Sorting Desk has reached a significant milestone.
  
*** WAIT Implement user notifications
- State "WAIT"       from "CANCELED"   [2014-11-26 Wed 09:08] \\
  Requires explicit approval.
- State "CANCELED"   from "WAIT"       [2014-10-09 Thu 10:43] \\
  This will have to be implemented by the client via notification of events. Not Sorting Desk's concern.
- State "WAIT"       from "TODO"       [2014-09-05 Fri 11:21] \\
  Need further information.
A mechanism for displaying notifications to the user is needed for the purpose
of providing feedback, in particular in the cases when a user action is invalid
and results in an error.

* Bugs
** TODO When items' DIV is selected, scrolling with keyboard both selects next item as well as scroll the DIV contents
Scrolling on the items' DIV container must be suppressed.

Note that this might not be possible if the browser does not allow control over the HTML element's focus.

** TODO Wrong items are selected when a list of items contains duplicate items
A possible solution for this is to append a timestamp to each item's id. Even though each HTML node's id would be unique, they would each refer to the same item datum.

** TODO =Droppable=: =reset= clearing *all* events
This could be undesirable since all the events attached to the element are cleared, including any events the client may have set up.

* To do items [0%]
** *ALL* [0%]
*** TODO Document code
First iteration would include modules and classes.
*** TODO Document required options
=SortingQueue=, =SortingDesk= and possibly other components, could do with documentation about required and optional options, callbacks and so on.
** =SortingQueue= [0%]
*** TODO Rename CSS class names alluding to the old concept of text item
Some CSS class names are still in use which employ the old concept of text item. These should be renamed such that the "text" word is removed.
*** TODO =Droppable=: requires reset method
See =ProtarchBinSpawner=. Specifically, there are instances where the events attached by =Droppable= need to be unbound at destruction time; i.e. when a =Droppable= instance is created on the DOM's own body.
*** TODO =ControllerItems=: disable all other dragging-related events
*** TODO Create a list of interesting events to advertise via an Events controller
*** TODO Items controller to notify client when no more items available
*** TODO [#B] Prefix text-items' node ids
- State "TODO"       from "WAIT"       [2014-09-07 Sun 08:16]
- State "WAIT"       from "TODO"       [2014-09-05 Fri 10:41] \\
  Currently waiting to hear from support as to whether ids are guaranteed to always be unique.
*** TODO Remove code handling keyboard events
*** WAIT Implement Events controller based on the publisher-subscriber design pattern
- State "WAIT"       from "TODO"       [2014-10-23 Thu 14:42]
** =SortingDesk= [25%]
*** TODO Allow specialisation of =ControllerButtonDismiss=
*** TODO Tentative: allow =SortingDesk='s constructor to receive a deferred object
Allow the constructor of =SortingDesk= to receive an *optional* deferred object provided, and which is under the responsibility of the user, that can be actioned upon depending on the result of the initialisation sequence.

Ultimately this optional mechanism would allow the user to receive perfectly timed notifications regarding Sorting Desk's initialisation state as and when they happen.
*** TODO =ControllerBins=: =onItemDropped= unused
*** TODO =ControllerBinSpawner=: =addManual= can't be supported as it stands
+ API requires knowledge of the bin's =label=.
+ Several TODO annotations have been created regarding this issue.
*** TODO Display of the bins should be minimal
Ideally, each bin should look like the item that was first dropped to create that bin.
*** TODO [#B] Prefix bins' node ids
- State "TODO"       from "WAIT"       [2014-09-07 Sun 08:16]
- State "WAIT"       from "TODO"       [2014-09-05 Fri 10:41] \\
  Currently waiting to hear from support as to whether ids are guaranteed to always be unique.
*** TODO =itemDroppedInBin=: should it be optional?
*** WAIT Implement keyboard auto-repeat with configurable frequency
- State "WAIT"       from "TODO"       [2014-10-15 Wed 13:56] \\
  Probable unwanted feature.
*** WAIT [#A] Allow bin statements to be edited
- State "WAIT"       from "TODO"       [2014-10-10 Fri 16:11] \\
  This will most likely require involvement of the client via a callback.
- State "TODO"       from "WAIT"       [2014-09-05 Fri 10:42]
- State "WAIT"       from "TODO"       [2014-08-22 Fri 13:24] \\
  Not proceeding with this until it's clear whether bins based on existing text items are even editable.
*** WAIT [#B] Do not allow duplicate bins
- State "WAIT"       from "CANCELED"   [2014-11-26 Wed 09:09] \\
  Reissuing TODO item as there is validity in the concept.
- State "CANCELED"   from "WAIT"       [2014-09-04 Thu 13:02] \\
  Most likely can't be done reliably.
- State "WAIT"       from "TODO"       [2014-08-22 Fri 12:44] \\
  Specifications aren't clear as to how bins that are based on existing text items
  are created.  
*** DONE Handle removal of currently active bin
- State "DONE"       from "TODO"       [2014-11-26 Wed 16:26]
*** CANCELED =addBin=: how to deal with the =ranker= argument?
- State "CANCELED"   from "TODO"       [2014-11-26 Wed 15:07] \\
  =addBin= callback no longer used.
*** CANCELED Ensure =addBin= callback exists when the 'bin add' button exists
- State "CANCELED"   from "TODO"       [2014-11-26 Wed 15:06] \\
  =addBin= callback no longer used.
** API [0%]
*** Live [100%]
**** DONE =getRandomLabel=: rename to =getRandomItem=
- State "DONE"       from "TODO"       [2014-12-06 Sat 11:42]
*** Mock [0%]
** Examples [33%]
*** TODO Fix broken examples
It seems only the =sorting_desk-live= example works at the moment.
*** WAIT Create examples [0%]
- State "WAIT"       from "TODO"       [2014-11-25 Tue 06:39] \\
  Not a priority at the moment.
**** TODO No content ids
*** DONE Revisit =sorting_desk-live.html= example
- State "DONE"       from "TODO"       [2014-12-06 Sat 11:42]
It no longer runs and its CSS is invalid compared to the =sorting_desk-mock-default.html= example.
** CSS [0%]
*** TODO Ensure CSS contained by Sorting Desk and Queue components is (still) valid
Many changes have been made which must have surely affected the CSS.  
** Tests [9%]
*** DONE init: enforce test compartmentalisation through cloning of nodes
- State "DONE"       from "TODO"       [2014-12-06 Sat 11:43]
*** TODO instance: ensure reset doesn't run twice
*** TODO instance: require =visibleItems= to be greater than 0
*** TODO callbacks: removed test for =renderAddButton=
*** TODO callbacks: removed test for =renderPrimaryBin=
*** TODO callbacks: removed test for =renderSecondaryBin=
*** TODO callbacks: removed test for =addPrimarySubBin=
*** TODO callbacks: removed test for =addSecondaryBin=
*** TODO interface: ensure 'bin add' button is created prior to using it
*** TODO interface: ensure correct number of sub-bins are created
*** TODO interface: removed test for adding of sub-bin
** Unclassified
*** TODO Revamp errors returned via promises to include error *codes*
It is easier for programs to process errors if they are given as a code. Errors in human natural language are only useful to humans, not programs.
*** TODO Review data structures
This includes =Sorting Desk='s bin data structure and =Sorting Queue='s item
data structure. Changes to any of the components will require updating the
different API and example source files, as well as dossier.js .

For instance, Sorting Queue expects an item to be composed of the following properties:

+ =raw=: reference to raw structure; probably not needed
+ =node_id=: the item's id
+ =name=: (a sort of) label/tag
+ =url=: URL to point =name= above to
+ =text=: actual item content
+ =title=: optional; appended to =name= above

The above could instead be:

+ =id=
+ =label= (or =tag=)
  - =name=
  - =title=
  - =url=
+ =text=

A similar discussion could be had regarding bins' data structure.
*** TODO Employ use of classes to identify hover state and possibly others
This is meant to resolve the problem that parent elements can't be styled depending on mouse state, such as =:hover=, when nested elements are used. The only way to reliably solve this problem is to rely on CSS classes to signal mouse states.
*** WAIT Resolve all annotated TODO items
- State "WAIT"       from "TODO"       [2014-10-15 Wed 13:57] \\
  To be done when Sorting Desk has reached a significant milestone.
*** WAIT [#C] Implement user notifications
- State "WAIT"       from "CANCELED"   [2014-11-26 Wed 09:08] \\
  Requires explicit approval.
- State "CANCELED"   from "WAIT"       [2014-10-09 Thu 10:43] \\
  This will have to be implemented by the client via notification of events. Not Sorting Desk's concern.
- State "WAIT"       from "TODO"       [2014-09-05 Fri 11:21] \\
  Need further information.
A mechanism for displaying notifications to the user is needed for the purpose
of providing feedback, in particular in the cases when a user action is invalid
and results in an error.
* Bugs [0%]
** TODO When items' DIV is selected, scrolling with keyboard both selects next item as well as scroll the DIV contents
Scrolling on the items' DIV container must be suppressed.

Note that this might not be possible if the browser does not allow control over the HTML element's focus.
** TODO Wrong items are selected when a list of items contains duplicate items
A possible solution for this is to append a timestamp to each item's id. Even though each HTML node's id would be unique, they would each refer to the same item datum.
